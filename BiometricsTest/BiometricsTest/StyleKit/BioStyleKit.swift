//
//  BioStyleKit.swift
//  BiometricTesting
//
//  Created by AuthorName on 8/7/18.
//  Copyright Â© 2018 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class BioStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfTextLayer: UIImage?
        static var textLayerTargets: [AnyObject]?
        static var imageOfShadowLayer: UIImage?
        static var shadowLayerTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawTextLayer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1125, height: 2436), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1125, height: 2436), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1125, y: resizedFrame.height / 2436)


        //// Color Declarations
        let color = UIColor(red: 0.878, green: 0.337, blue: 0.992, alpha: 1.000)

        //// text Drawing
        context.saveGState()
        context.translateBy(x: -23.75, y: 542.2)
        context.rotate(by: -13.22 * CGFloat.pi/180)

        let textRect = CGRect(x: 0, y: 0, width: 1023.46, height: 1016.56)
        let textTextContent = "Super happy \nawsome\nfun time \nmessanging"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Papyrus", size: 148)!,
            .foregroundColor: color,
            .paragraphStyle: textStyle,
						] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCanvas2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1125, height: 2436), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1125, height: 2436), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1125, y: resizedFrame.height / 2436)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 1125, resizedFrame.height / 2436)


        //// Color Declarations
        let color = UIColor(red: 0.878, green: 0.337, blue: 0.992, alpha: 1.000)
        let color3 = color.withAlphaComponent(0.5)

        //// Shadow Declarations
        let shadow2 = NSShadow()
        shadow2.shadowColor = color
        shadow2.shadowOffset = CGSize(width: 0, height: 0)
        shadow2.shadowBlurRadius = 50

        //// shadow Drawing
        context.saveGState()
        context.translateBy(x: -23.75, y: 542.2)
        context.rotate(by: -13.22 * CGFloat.pi/180)

        context.saveGState()
        context.setAlpha(0.5)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let shadowRect = CGRect(x: 0, y: 0, width: 1023.46, height: 1016.56)
        let shadowTextContent = "Super happy \nawsome\nfun time \nmessanging"
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: (shadow2.shadowColor as! UIColor).cgColor)
        let shadowStyle = NSMutableParagraphStyle()
        shadowStyle.alignment = .center
        let shadowFontAttributes = [
            .font: UIFont(name: "Papyrus", size: 148)!,
            .foregroundColor: color3,
            .paragraphStyle: shadowStyle,
						] as [NSAttributedString.Key: Any]

        let shadowTextHeight: CGFloat = shadowTextContent.boundingRect(with: CGSize(width: shadowRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: shadowFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: shadowRect)
        shadowTextContent.draw(in: CGRect(x: shadowRect.minX, y: shadowRect.minY + (shadowRect.height - shadowTextHeight) / 2, width: shadowRect.width, height: shadowTextHeight), withAttributes: shadowFontAttributes)
        context.restoreGState()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        //// text Drawing
        context.saveGState()
        context.translateBy(x: -23.75, y: 542.2)
        context.rotate(by: -13.22 * CGFloat.pi/180)

        let textRect = CGRect(x: 0, y: 0, width: 1023.46, height: 1016.56)
        let textTextContent = "Super happy \nawsome\nfun time \nmessanging"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Papyrus", size: 148)!,
            .foregroundColor: color,
            .paragraphStyle: textStyle,
						] as [NSAttributedString.Key: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawShadowLayer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1125, height: 2436), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1125, height: 2436), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1125, y: resizedFrame.height / 2436)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 1125, resizedFrame.height / 2436)


        //// Color Declarations
        let color = UIColor(red: 0.878, green: 0.337, blue: 0.992, alpha: 1.000)
        let color3 = color.withAlphaComponent(0.5)

        //// Shadow Declarations
        let shadow2 = NSShadow()
        shadow2.shadowColor = color
        shadow2.shadowOffset = CGSize(width: 0, height: 0)
        shadow2.shadowBlurRadius = 50

        //// shadow Drawing
        context.saveGState()
        context.translateBy(x: -23.75, y: 542.2)
        context.rotate(by: -13.22 * CGFloat.pi/180)

        context.saveGState()
        context.setAlpha(0.5)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let shadowRect = CGRect(x: 0, y: 0, width: 1023.46, height: 1016.56)
        let shadowTextContent = "Super happy \nawsome\nfun time \nmessanging"
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: (shadow2.shadowColor as! UIColor).cgColor)
        let shadowStyle = NSMutableParagraphStyle()
        shadowStyle.alignment = .center
        let shadowFontAttributes = [
            .font: UIFont(name: "Papyrus", size: 148)!,
            .foregroundColor: color3,
            .paragraphStyle: shadowStyle,
						] as [NSAttributedString.Key: Any]

        let shadowTextHeight: CGFloat = shadowTextContent.boundingRect(with: CGSize(width: shadowRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: shadowFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: shadowRect)
        shadowTextContent.draw(in: CGRect(x: shadowRect.minX, y: shadowRect.minY + (shadowRect.height - shadowTextHeight) / 2, width: shadowRect.width, height: shadowTextHeight), withAttributes: shadowFontAttributes)
        context.restoreGState()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfTextLayer: UIImage {
        if Cache.imageOfTextLayer != nil {
            return Cache.imageOfTextLayer!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 1125, height: 2436), false, 0)
            BioStyleKit.drawTextLayer()

        Cache.imageOfTextLayer = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfTextLayer!
    }

    @objc dynamic public class var imageOfShadowLayer: UIImage {
        if Cache.imageOfShadowLayer != nil {
            return Cache.imageOfShadowLayer!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 1125, height: 2436), false, 0)
            BioStyleKit.drawShadowLayer()

        Cache.imageOfShadowLayer = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfShadowLayer!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var textLayerTargets: [AnyObject]! {
        get { return Cache.textLayerTargets }
        set {
            Cache.textLayerTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: BioStyleKit.imageOfTextLayer)
            }
        }
    }

    @objc @IBOutlet dynamic var shadowLayerTargets: [AnyObject]! {
        get { return Cache.shadowLayerTargets }
        set {
            Cache.shadowLayerTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: BioStyleKit.imageOfShadowLayer)
            }
        }
    }




    @objc(BioStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
